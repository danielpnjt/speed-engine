// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/daniel/Desktop/danielpnjt/speed-engine/internal/domain/repositories/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/danielpnjt/speed-engine/internal/domain/entities"
	constants "github.com/danielpnjt/speed-engine/internal/pkg/constants"
	utils "github.com/danielpnjt/speed-engine/internal/pkg/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(ctx context.Context, entity *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), ctx, entity)
}

// FindAllAndCount mocks base method.
func (m *MockUser) FindAllAndCount(ctx context.Context, pagination constants.PaginationRequest, conds ...utils.DBCond) ([]entities.User, int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, pagination}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllAndCount", varargs...)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllAndCount indicates an expected call of FindAllAndCount.
func (mr *MockUserMockRecorder) FindAllAndCount(ctx, pagination interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, pagination}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAndCount", reflect.TypeOf((*MockUser)(nil).FindAllAndCount), varargs...)
}

// FindByID mocks base method.
func (m *MockUser) FindByID(ctx context.Context, id int) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUser)(nil).FindByID), ctx, id)
}

// FindByUsername mocks base method.
func (m *MockUser) FindByUsername(ctx context.Context, username string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, username)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserMockRecorder) FindByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUser)(nil).FindByUsername), ctx, username)
}
